{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d7b8a094-e875-4762-ba57-bffde3c24d6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "import time, random\n",
    "\n",
    "random.seed(1)\n",
    "\n",
    "def ask_question(equations,solution):\n",
    "    \n",
    "    for i in range(len(equations)):\n",
    "        clear_output(wait=True)\n",
    "        print(equations[i])\n",
    "        time.sleep(2)\n",
    "        \n",
    "        clear_output(wait=True)\n",
    "    \n",
    "    ans = input(\"Enter the solution: \")\n",
    "    clear_output(wait=True)\n",
    "    \n",
    "    if int(ans) == solution:\n",
    "        score = 1\n",
    "        print(\"Correct!\")\n",
    "    else:\n",
    "        score = 0\n",
    "        print(\"Incorrect!\")\n",
    "        \n",
    "    return score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8b76ef32-8af4-4eb3-a4b8-b8239dc7d636",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter your anonymised ID\n",
      "To generate an anonymous 4-letter unique user identifier please enter:\n",
      "- two letters based on the initials (first and last name) of a childhood friend\n",
      "- two letters based on the initials (first and last name) of a favourite actor / actress\n",
      "e.g. if your friend was called Charlie Brown and film star was Tom Cruise\n",
      "then your unique identifer would be CBTC\n",
      "\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "Interrupted by user",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[22], line 20\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mthen your unique identifer would be CBTC\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28mprint\u001b[39m(id_instructions)\n\u001b[0;32m---> 20\u001b[0m user_id \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m> \u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUser entered id:\u001b[39m\u001b[38;5;124m\"\u001b[39m, user_id)\n\u001b[1;32m     24\u001b[0m gender \u001b[38;5;241m=\u001b[39m \u001b[38;5;28minput\u001b[39m (\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWhat\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ms your gender?\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m/opt/tljh/user/lib/python3.10/site-packages/ipykernel/kernelbase.py:1202\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1200\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1201\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(msg)\n\u001b[0;32m-> 1202\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1203\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1204\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1205\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1206\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1207\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/tljh/user/lib/python3.10/site-packages/ipykernel/kernelbase.py:1245\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1242\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1243\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m   1244\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1245\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1246\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1247\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
     ]
    }
   ],
   "source": [
    "print(\"Welcome to the Maths Ability test\")\n",
    "time.sleep(1)\n",
    "clear_output(wait=False)\n",
    "\n",
    "id_instructions=\"\"\n",
    "\n",
    "print(\"Enter your anonymised ID\")\n",
    "\n",
    "print(\"To generate an anonymous 4-letter unique user identifier please enter:\")\n",
    "\n",
    "print(\"- two letters based on the initials (first and last name) of a childhood friend\")\n",
    "\n",
    "print(\"- two letters based on the initials (first and last name) of a favourite actor / actress\")\n",
    "\n",
    "print(\"e.g. if your friend was called Charlie Brown and film star was Tom Cruise\")\n",
    "\n",
    "print(\"then your unique identifer would be CBTC\")\n",
    "\n",
    "print(id_instructions)\n",
    "user_id = input(\"> \")\n",
    "\n",
    "print(\"User entered id:\", user_id)\n",
    "\n",
    "gender = input (\"What's your gender?\")\n",
    "age = input (\"How old are you\")\n",
    "clear_output(wait=False)\n",
    "\n",
    "print(\"A guide on the sings used:\")\n",
    "print(\" Addition: (+), Subtraction: (-), Division: (/), Multiplication: (*), Power: (^)\")\n",
    "print(\" PAY ATTENTION TO ORDER OF OPERATION (PEMDAS)\")\n",
    "time.sleep(10)\n",
    "clear_output(wait=False)\n",
    "    \n",
    "print(\"Calculate the following equations:\")\n",
    "time.sleep(1)\n",
    "\n",
    "total_score = 0\n",
    "total_time = 0\n",
    "start_time = time.time()\n",
    "duration = 180  # 3 minutes in seconds\n",
    "\n",
    "equations = [['1', '+2'],['15', '-4'], ['17','*3'], ['45','/5'], ['53', '+12'], ['34','-26'],['3','*4','+6'], \n",
    "             ['48','/2','-3'], ['(9+2)','*8'], ['56','/7','*0','+16'], ['11', '^2'], ['20','-4','/2'], ['7','-32'],\n",
    "             ['5','*(8-2)'], ['155','/5','*0'], ['2','-7','+3'], ['9','+3','/(6-3)'], ['87','-4']]\n",
    "\n",
    "\n",
    "solutions = [3, 11, 51, 9, 65, 8, 18, 21, 88, 16, 121, 18, -25, 30, 0, -2, 10, 83]\n",
    "\n",
    "i = 0\n",
    "\n",
    "while time.time() - start_time < duration and i < len(equations):\n",
    "    qstart = time.time()\n",
    "    result = ask_question(equations[i],solutions[i])\n",
    "    qend = time.time()\n",
    "    qtime = qend - qstart\n",
    "    total_time = total_time + qtime\n",
    "    total_score = total_score + result\n",
    "    i = i + 1\n",
    "    print(\"Scores:\", total_score)\n",
    "    time.sleep(1)\n",
    "    clear_output(wait=False)\n",
    "\n",
    "average_time = total_time / i\n",
    "\n",
    "print(\"Time's up! Scores earned:\", total_score)\n",
    "print(\"Average time per question (min):\", average_time/60)\n",
    "print (\"Total time to take the test (min):\", total_time/60)\n",
    "print(\"\")\n",
    "\n",
    "score = input(\"Enter the number of scores earned:\")\n",
    "time = input(\"Enter the time it took you to complete the test in this format (00.00):\")\n",
    "clear_output(wait=False)\n",
    "\n",
    "\n",
    "data_consent_info = \"DATA CONSENT INFORMATION:\"\n",
    "\n",
    "print(\"Please read:\")\n",
    "print(\"We wish to record your response data to an anonymised public data repository.\")\n",
    "print(\"Your data will be used for educational teaching purposes, practising data analysis and visualisation.\")\n",
    "print(\"Please type YES in the box below if you consent to the upload.\")\n",
    "\n",
    "print(data_consent_info)\n",
    "result = input(\"> \")\n",
    "\n",
    "if result == \"yes\":\n",
    "    print(\"Thanks for your participation.\") \n",
    "    print(\"Please contact philip.lewis@ucl.ac.uk\")\n",
    "    print(\"If you have any questions or concerns\")\n",
    "    print(\"regarding the stored results.\")\n",
    "\n",
    "else:\n",
    "    raise(Exception(\"User did not consent to continue test.\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c1d971c8-1e49-433d-825e-c4887492d919",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dict = {\n",
    "'User id': user_id,\n",
    "'Gender': gender,\n",
    "'Age': age,\n",
    "'Score': score,\n",
    "'Time': time\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "48079dda-d5fb-41d2-99c1-40c260b9cf53",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import json\n",
    "\n",
    "def send_to_google_form(data_dict, form_url):\n",
    "    ''' Helper function to upload information to a corresponding google form \n",
    "        You are not expected to follow the code within this function!\n",
    "    '''\n",
    "    form_id = form_url[34:90]\n",
    "    view_form_url = f'https://docs.google.com/forms/d/e/{form_id}/viewform'\n",
    "    post_form_url = f'https://docs.google.com/forms/d/e/{form_id}/formResponse'\n",
    "\n",
    "    page = requests.get(view_form_url)\n",
    "    content = BeautifulSoup(page.content, \"html.parser\").find('script', type='text/javascript')\n",
    "    content = content.text[27:-1]\n",
    "    result = json.loads(content)[1][1]\n",
    "    form_dict = {}\n",
    "    \n",
    "    loaded_all = True\n",
    "    for item in result:\n",
    "        if item[1] not in data_dict:\n",
    "            print(f\"Form item {item[1]} not found. Data not uploaded.\")\n",
    "            loaded_all = False\n",
    "            return False\n",
    "        form_dict[f'entry.{item[4][0][0]}'] = data_dict[item[1]]\n",
    "    \n",
    "    post_result = requests.post(post_form_url, data=form_dict)\n",
    "    return post_result.ok\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f9f909fe-9df8-4804-89f0-f43fb1e4798b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "form_url = 'https://docs.google.com/forms/d/e/1FAIpQLSdm4H5JToGE3VCnEek4cYwAw5x31k0j442olnP29LJaaFT_vg/viewform?usp=sf_link'\n",
    "send_to_google_form(data_dict, form_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c049f2ec-2884-4de7-aa2d-d0751bb3868f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
